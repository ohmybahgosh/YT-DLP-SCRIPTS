#!/bin/bash
#######################################################################################################################
#######################################################################################################################
###              /$$$$$$$  /$$$$$$$$  /$$$$$$  /$$$$$$$        /$$$$$$$$ /$$   /$$ /$$$$$$  /$$$$$$                 ###
###  ;;;;;      | $$__  $$| $$_____/ /$$__  $$| $$__  $$      |__  $$__/| $$  | $$|_  $$_/ /$$__  $$         ;;;;;  ###
###  ;;;;;      | $$  \ $$| $$      | $$  \ $$| $$  \ $$         | $$   | $$  | $$  | $$  | $$  \__/         ;;;;;  ###
###  ;;;;;      | $$$$$$$/| $$$$$   | $$$$$$$$| $$  | $$         | $$   | $$$$$$$$  | $$  |  $$$$$$          ;;;;;  ###
###  ;;;;;      | $$$$$$$/| $$$$$   | $$$$$$$$| $$  | $$         | $$   | $$$$$$$$  | $$  |  $$$$$$          ;;;;;  ###
###  ;;;;;      | $$__  $$| $$__/   | $$__  $$| $$  | $$         | $$   | $$__  $$  | $$   \____  $$         ;;;;;  ###
###..;;;;;..    | $$  \ $$| $$      | $$  | $$| $$  | $$         | $$   | $$  | $$  | $$   /$$  \ $$       ..;;;;;..###
### ':::::'     | $$  | $$| $$$$$$$$| $$  | $$| $$$$$$$/         | $$   | $$  | $$ /$$$$$$|  $$$$$$/        ':::::' ###
###   ':`       |__/  |__/|________/|__/  |__/|_______/          |__/   |__/  |__/|______/ \______/           ':`   ###
#######################################################################################################################
#######################################################################################################################
##                                ---> IF THIS SCRIPT ISN'T WORKING FOR YOU... <---                                  ##
##                     THERE'S A HIGH LIKELYHOOD THAT YOUR COOKIE ISN'T FORMATTED CORRECTLY                          ##
#######################################################################################################################
#######################################################################################################################
##                   ---> I HIGHLY RECOMMEND USING CHROME WITH THE EditThisCookie EXTENSION: <---                    ##
##           https://chrome.google.com/webstore/detail/edit-this-cookie/fngmhnnpilhplaeedifhccceomclgfbg             ##
#######################################################################################################################
#######################################################################################################################
##                               YOUR COOKIE FILE NEEDS TO BE IN NETSCAPE FORMAT ONLY                                ##
##                            YOU MUST INCLUDE ALL Paramount+ SUB-DOMAINS IN YOUR COOKIE                             ##
#######################################################################################################################
##                    TO SEE SOME SCREENSHOTS OF EXTRACTING AND USING A COOKIE WITH YT-DLP:                          ##
##                           https://github.com/ohmybahgosh/YT-DLP-SCRIPTS/COOKIE-SETUP                              ##
#######################################################################################################################
#######################################################################################################################

## Path To Your Cookie
#PARAMOUNT_COOKIE=/STORAGE/PARAMOUNT/paramountplus_cookies.txt

## UNCOMMENT AND FILL IN YOUR PROXY_IP:PORT IF OUTSIDE OF THE US
## SCROLL DOWN TO FIND OTHER LINES WHERE YOU NEED TO UNCOMMENT IF USING THE GEO VERIFICATION PROXY
#PROXY_IP=PROXY_IP:PORT


## Boilerplate ASCII Formatting Functions:
centerCOLOR_ONE() {
	termwidth=$(tput cols);
    padding=$(printf '%0.1s' " "{1..500});
    printf '%*.*s \e[35m%s\e[21m\e[0m %*.*s\n' 0 "$(((termwidth-2-${#1})/2))" "$padding" "$1" 0 "$(((termwidth-1-${#1})/2))" "$padding"
}

centerCOLOR_TWO() {
	termwidth=$(tput cols);
    padding=$(printf '%0.1s' " "{1..500});
    printf '%*.*s \e[36m%s\e[21m\e[0m %*.*s\n' 0 "$(((termwidth-2-${#1})/2))" "$padding" "$1" 0 "$(((termwidth-1-${#1})/2))" "$padding"
}

centerCOLOR_THREE() {
	termwidth=$(tput cols);
    padding=$(printf '%0.1s' " "{1..500});
    printf '%*.*s \e[34m%s\e[21m\e[0m %*.*s\n' 0 "$(((termwidth-2-${#1})/2))" "$padding" "$1" 0 "$(((termwidth-1-${#1})/2))" "$padding"
}

centerCOLOR_FOUR() {
	termwidth=$(tput cols);
    padding=$(printf '%0.1s' " "{1..500});
    printf '%*.*s \e[31m%s\e[21m\e[0m %*.*s\n' 0 "$(((termwidth-2-${#1})/2))" "$padding" "$1" 0 "$(((termwidth-1-${#1})/2))" "$padding"
}

centerBLINK() {
	termwidth=$(tput cols);
    padding=$(printf '%0.1s' " "{1..500}); 
    printf '%*.*s \e[36m\e[5m%s\e[0m\e[25m %*.*s\n' 0 "$(((termwidth-2-${#1})/2))" "$padding" "$1" 0 "$(((termwidth-1-${#1})/2))" "$padding"
}

centerBOLD() {
	termwidth=$(tput cols);
    padding=$(printf '%0.1s' " "{1..500});
    printf '%*.*s \e[35m\e[1m%s\e[21m\e[0m %*.*s\n' 0 "$(((termwidth-2-${#1})/2))" "$padding" "$1" 0 "$(((termwidth-1-${#1})/2))" "$padding"
}

centerBOLD_TWO() {
	termwidth=$(tput cols);
    padding=$(printf '%0.1s' " "{1..500});
    printf '%*.*s \e[36m\e[1m%s\e[21m\e[0m %*.*s\n' 0 "$(((termwidth-2-${#1})/2))" "$padding" "$1" 0 "$(((termwidth-1-${#1})/2))" "$padding"
}


## Let's Get The Party Started By Grabbing Some User Input...
clear
centerCOLOR_ONE "First We Have To Determine How Many Seasons There Are..."
centerCOLOR_TWO "Then, We'll Determine & Extract The Episode URLs From Each Season"
centerCOLOR_THREE "Once We Extract The Episode URLs, We'll Begin Downloading Them.." && sleep 1 && echo "" && echo ""
read -n 1 -s -r -p "`centerBLINK '_-Press Any Key to BEGIN-_'`"

## Let's Grab The Series URL..
read -e -p "`clear` `centerCOLOR_ONE "Provide The URL For The Series (INCLUDING THE LAST FORWARD SLASH):"` `centerCOLOR_TWO "Ex: https://www.paramountplus.com/shows/evil/"` `printf "\e[35m\e[1m\nENTER THE URL:\n\e[36m\e[1m>\e[21m\e[0m "`" RAW_SERIES_URL
clear
centerCOLOR_ONE "Series URL Entered:"
centerCOLOR_TWO "$RAW_SERIES_URL" && sleep 1 && echo "" && echo ""
read -n 1 -s -r -p "`centerBLINK '_-Press Any Key to Continue-_'`"
clear

## Let's Strip Down The Provided Series URL, Leaving Just The Series Name URL Slug
URL_SLUG=$(echo $RAW_SERIES_URL | sed -E 's/^.*shows\/(.*).*\/$/\1/')

## Let's Provide The FULL Path To Our COOOOOKIE
read -e -p "`clear` `centerCOLOR_ONE "Provide The FULL PATH For The Cookie File:"` `centerCOLOR_TWO "Ex: /STORAGE/PARAMOUNT/paramountplus_cookies.txt"` `printf "\e[35m\e[1m\nENTER PATH:\n\e[36m\e[1m>\e[21m\e[0m "`" PARAMOUNT_COOKIE
clear
centerCOLOR_ONE "Cookie Path Entered:"
centerCOLOR_TWO "$PARAMOUNT_COOKIE" && sleep 1 && echo "" && echo ""
read -n 1 -s -r -p "`centerBLINK '_-Press Any Key to Continue-_'`"
clear

## Let's Set The Output Directory That We'll Work Inside of
read -e -p "`clear` `centerCOLOR_ONE "Enter The Path To a Directory Where You Want To Download To"` `centerCOLOR_TWO "Ex: /STORAGE/PARAMOUNT"` `printf "\e[35m\e[1m\nENTER PATH:\n\e[36m\e[1m>\e[21m\e[0m "`" OUTPUTDIR
clear
centerCOLOR_ONE "You Entered:"
centerCOLOR_TWO "$OUTPUTDIR" && sleep 1 && echo "" && echo ""
read -n 1 -s -r -p "`centerBLINK '_-Press Any Key to Continue-_'`"
clear

## Create a TMP Directory To Safely Work Inside of..
cd $OUTPUTDIR
TMPWORKDIR=$(echo "${URL_SLUG}_$((1 + $RANDOM % 10000))_TMPWORKDIR")
mkdir $TMPWORKDIR && cd $TMPWORKDIR


## Let's Get a Loop Together Here, So That We Can Extract EVERY Episode URL fro EVERY Season
## To Loop Thru Echo Season, We Use SEQ to Generate The List of Seasons
## SEQ Automatically Outputs a Range For Us by Counting Upwards From 1 Until Meeting The Total Season Count
## If in the loop we determine there are 3 seasons, a variable called SEASON_COUNT is set to 3
## With The ${SEASON_COUNT} Variable Now Set, The Command "seq ${SEASOUN_COUNT} Will Output 1-3 Incrementally With Each Number on a New Line
## Each Season (I.E. Each Line Read in the Loop) is Then Parsed to Extract ALL Avaiable Episodes For The Season
centerCOLOR_ONE "Now Let's Determine How Many Seasons There Are For This Series"
centerCOLOR_TWO "...Then We'll Extract The Episode URLS For Each Season" && sleep 1 && echo "" && echo ""
read -n 1 -s -r -p "`centerBLINK '_-Press Any Key to Continue-_'`"
clear

## Create Filename Variable For Our URL LIST
EPISODE_URL_LIST=${URL_SLUG}_INPUT_URLS.txt

## Determine How Many Seasons The Series Has By Piping CURL Output in to XIDEL
SEASON_COUNT=$(curl --silent --proxy "$PROXY_IP" --cookie "$PARAMOUNT_COOKIE" "https://www.paramountplus.com/shows/$URL_SLUG/" | xidel -s --xpath "//option" - | wc -l)
if [ "$SEASON_COUNT" -eq "0" ]; then
    SEASON_COUNT_ALT=$(curl --silent --proxy "$PROXY_IP" --cookie "$PARAMOUNT_COOKIE" "https://www.paramountplus.com/shows/$URL_SLUG/" | xidel -s --xpath "//p[@class='seasonEpisode']")
    	if [ "$SEASON_COUNT_ALT" != "0" ]; then
    		SEASON_COUNT=1
    	else
    		centerCOLOR_ONE "Fudge..No Seasons Found" && sleep 1
    		centerCOLOR_TWO "Exiting Script..." && sleep 3
    		clear
    		exit 1
    	fi
fi
## Begin Loop..
while read -r SEASON_NUMBER; do
	# Now That We Know How Many Seasons We're Working With, Let's Pull The JSON For Each Season
	JSON_DUMP=$(curl --silent --proxy "$PROXY_IP" --cookie "$PARAMOUNT_COOKIE" "https://www.paramountplus.com/shows/$URL_SLUG/video/xhr/episodes/page/0/size/100/xs/0/season/$SEASON_NUMBER/" -H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0' -H 'Accept: application/json, text/javascript, */*; q=0.01' -H 'Accept-Language: en-US,en;q=0.5' --compressed -H 'X-Requested-With: XMLHttpRequest' -H 'Sec-Fetch-Dest: empty' -H 'Sec-Fetch-Mode: cors' -H 'Sec-Fetch-Site: same-origin' -H 'Referer: https://www.paramountplus.com/shows/' -H 'Connection: keep-alive' -H 'Cache-Control: max-age=0' -H 'TE: trailers')

	# For Each Season We Loop Thru, We'll Extract The Episode URLs in to a TXT File
	echo $JSON_DUMP | jq -r '.result.data[].metaData.videoPageURL' | sed 's#^#https://paramountplus.com#g' >> $EPISODE_URL_LIST
done< <(seq $SEASON_COUNT)


## Let's Get The Total Episode Count & Set it To A Variable
EPISODE_COUNT=$(cat $EPISODE_URL_LIST | wc -l) && clear

## Brag About What We Found!
centerCOLOR_ONE "$SEASON_COUNT Seasons Found!" && sleep 1 && echo ""
centerCOLOR_TWO "$EPISODE_COUNT Episodes Found!" && sleep 3 && echo "" && echo ""
read -n 1 -s -r -p "`centerBLINK '_-Press Any Key to Begin Downloading The Episodes-_'`"
clear

## Now We Sit Back and Have YT-DLP Download Every Episode We Found From Our TXT File
## Create a function so we can multi-thread

MULTI_THREAD(){

### DEFAULT COMMAND - NON GEO VERIFICATION PROXY USAGE
yt-dlp --quiet --extractor-retries 5 --no-warnings --downloader aria2c --downloader-args "aria2c:-x 16 -s 40 -j 16 -k 10M --summary-interval=0" -o '%(series)s/Season %(season_number)s/%(series)s - S%(season_number)02dE%(episode_number)02d: %(title)s.%(ext)s' "$EP_URL"


## IF USING THE GEO PROXY VERIFICATION BYPASS, COMMENT OUT THE DEFAULT YT-DLP COMMAND
## ..AND UNCOMMENT THE COMMENTED OUT YT-DLP COMMAND THAT CONTAINS "--geo-verification-proxy" 

### ALTERNATIVE COMMAND - GEO VERIFICATION PROXY BYPASS
#yt-dlp --geo-verification-proxy "$PROXY_IP" --quiet --extractor-retries 5 --no-warnings --downloader aria2c --downloader-args "aria2c:-x 16 -s 40 -j 16 -k 10M --summary-interval=0" -o '%(series)s/Season %(season_number)s/%(series)s - S%(season_number)02dE%(episode_number)02d: %(title)s.%(ext)s' "$EP_URL"

}

## READ LINES FROM EPISODE_URL_LIST AND PASS IT TO MULTI_THREAD FUNCTION
while read -r EP_URL; do
    centerBOLD "Downloading:"
    centerBOLD_TWO "$EP_URL"
	MULTI_THREAD &
	## THE NUMBER DIRRCTLY FOLLOWING "-ge" IS HOW MANY THREADS,MODIFY AS NEEDED
	## CURRENTLY THIS SCRIPT WILL CREATE 5 THREADS AT A TIME
	[ "$( jobs | wc -l )" -ge 5 ] && wait && clear
done < $EPISODE_URL_LIST
 wait

## Let's Clean Stuff Up..
##
## Paramount+ Includes The Series Title in The Episode Name, So Let's Clean That Up
## BEFORE: "/DOWNLOAD_FOLDER/Evil/Season 1/Evil - S01E01: Evil - Genesis 1.mp4"
## AFTER:  "/DOWNLOAD_FOLDER/Evil/Season 1/Evil - S01E01: Genesis 1.mp4"
clear
centerCOLOR_ONE "All The Episodes Are Done Downloading.." && sleep 1 && echo ""
centerCOLOR_TWO "..Now We'll Begin Cleaning Filenames, and Then We're All Done" && sleep 3 && echo "" && echo ""
read -n 1 -s -r -p "`centerBLINK '_-Press Any Key to Clean The Files-_'`"
clear

## Begin Episode File Renaming Loop
while read -r line; do
	AFTER=$(echo $line | sed 's#: .* - #: #')
	mv "$line" "$AFTER"
done < <(find . -name '*.mp4' -o -name '*.jpg')

## Remove The TXT File of URLS, Feel Free To Comment This Out
centerCOLOR_ONE "To KEEP $EPISODE_URL_LIST Type: N (..and Hit Enter)" && echo ""
centerCOLOR_TWO "To DELETE $EPISODE_URL_LIST Type: Y (..and Hit Enter)" && echo "" && echo ""
rm -i $EPISODE_URL_LIST
clear


## ALL DONE
centerCOLOR_ONE "WE'RE ALL DONE HERE.." && sleep 1 && echo "" && echo ""
centerCOLOR_TWO "...For More Scripts, Be Sure To Checkout My Repo:" && sleep 1 && echo ""
centerCOLOR_THREE "https://github.com/ohmybahgosh/YT-DLP-SCRIPTS" && sleep 3 && echo "" && echo ""
read -n 1 -s -r -p "`centerBLINK '_-Press Any Key to Exit-_'`"
clear
exit 0
